Testing List:

list should be empty:
PASS: getCount() == 0
PASS: RemoveHead() == NULL
PASS: getHead() == NULL
PASS: getTail() == NULL
add some items:
PASS: AddHead() == ALPHA
PASS: AddHead() == BRAVO
PASS: AddHead() == CHARLIE
PASS: AddTail() == DELTA
PASS: AddTail() == ECHO
PASS: AddTail() == FOXTROT
list should have 6 elements:
PASS: getCount() == 6
PASS: getHead() == CHARLIE
PASS: getTail() == FOXTROT
remove all items:
PASS: RemoveHead() == CHARLIE
PASS: RemoveHead() == BRAVO
PASS: RemoveHead() == ALPHA
PASS: RemoveHead() == DELTA
PASS: RemoveHead() == ECHO
PASS: RemoveHead() == FOXTROT
list should be empty (again):
PASS: getCount() == 0
PASS: RemoveHead() == NULL
PASS: getHead() == NULL
PASS: getTail() == NULL


Testing Queue:

queue should be empty:
PASS: getCount() == 0
PASS: Dequeue() == NULL
PASS: getFront() == NULL
PASS: getBack() == NULL
enqueue some items:
PASS: Enqueue() == ALPHA
PASS: Enqueue() == BRAVO
PASS: Enqueue() == CHARLIE
PASS: Enqueue() == DELTA
PASS: Enqueue() == ECHO
PASS: Enqueue() == FOXTROT
queue should have 6 elements:
PASS: getCount() == 6
PASS: getFront() == ALPHA
PASS: getBack() == FOXTROT
dequeue all items:
PASS: Dequeue() == ALPHA
PASS: Dequeue() == BRAVO
PASS: Dequeue() == CHARLIE
PASS: Dequeue() == DELTA
PASS: Dequeue() == ECHO
PASS: Dequeue() == FOXTROT
queue should be empty (again):
PASS: getCount() == 0
PASS: Dequeue() == NULL
PASS: getFront() == NULL
PASS: getBack() == NULL


Testing Stack:

stack should be empty:
PASS: getCount() == 0
PASS: Pop() == NULL
PASS: getTop() == NULL
PASS: getBottom() == NULL
push some items:
PASS: Push() == ALPHA
PASS: Push() == BRAVO
PASS: Push() == CHARLIE
PASS: Push() == DELTA
PASS: Push() == ECHO
PASS: Push() == FOXTROT
stack should have 6 elements:
PASS: getCount() == 6
PASS: getTop() == FOXTROT
PASS: getBottom() == ALPHA
dequeue all items:
PASS: Pop() == FOXTROT
PASS: Pop() == ECHO
PASS: Pop() == DELTA
PASS: Pop() == CHARLIE
PASS: Pop() == BRAVO
PASS: Pop() == ALPHA
stack should be empty (again):
PASS: getCount() == 0
PASS: Pop() == NULL
PASS: getTop() == NULL
PASS: getBottom() == NULL


Testing SquareArray (size = 2):

0 1 
2 3 

rotated clockwise:

2 0 
3 1 

rotated counter-clockwise:

0 1 
2 3 

PASS: arrays match.

Testing SquareArray (size = 3):

0 1 2 
3 4 5 
6 7 8 

rotated clockwise:

6 3 0 
7 4 1 
8 5 2 

rotated counter-clockwise:

0 1 2 
3 4 5 
6 7 8 

PASS: arrays match.

Testing SquareArray (size = 4):

0 1 2 3 
4 5 6 7 
8 9 A B 
C D E F 

rotated clockwise:

C 8 4 0 
D 9 5 1 
E A 6 2 
F B 7 3 

rotated counter-clockwise:

0 1 2 3 
4 5 6 7 
8 9 A B 
C D E F 

PASS: arrays match.

Testing SquareArray (size = 5):

0 1 2 3 4 
5 6 7 8 9 
A B C D E 
F G H I J 
K L M N O 

rotated clockwise:

K F A 5 0 
L G B 6 1 
M H C 7 2 
N I D 8 3 
O J E 9 4 

rotated counter-clockwise:

0 1 2 3 4 
5 6 7 8 9 
A B C D E 
F G H I J 
K L M N O 

PASS: arrays match.

Testing SquareArray (size = 6):

0 1 2 3 4 5 
6 7 8 9 A B 
C D E F G H 
I J K L M N 
O P Q R S T 
U V W X Y Z 

rotated clockwise:

U O I C 6 0 
V P J D 7 1 
W Q K E 8 2 
X R L F 9 3 
Y S M G A 4 
Z T N H B 5 

rotated counter-clockwise:

0 1 2 3 4 5 
6 7 8 9 A B 
C D E F G H 
I J K L M N 
O P Q R S T 
U V W X Y Z 

PASS: arrays match.



Tests:  74
Passed: 74

Program ended with exit code: 0